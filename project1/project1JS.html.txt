<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Pong</title>

    <!-- Basic styling, centering the canvas -->
    <style>
        canvas {
            display: block;
            position: absolute;
            margin: auto;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
        }

        h2 {
            display: block;
            margin: auto;
            text-align: center;
        }
    </style>
</head>
<body>
<script>

    /**
     * Constants
     */
    const WIDTH = 550;
    const HEIGHT = 550;
    const PI = Math.PI;
    const UP_ARROW = 38;
    const DOWN_ARROW = 40;
    const PLAYER_SPEED = 10;
    const AI_SPEED_FACTOR = 0.05; //keep somewhere between 0 and 1
    const BALL_SPEED = 5;
    const BALL_SIDE = 35;
    const SOUND = new Audio("data:audio/wav;base64,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qJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=");

    /**
     * Game elements
     */
    let canvas,
        canvasDiv,
        scoreDiv,
        score,
        pauseBtn,
        ctx,
        keystate,
        isPaused;
    /**
     * The player paddle
     *
     * @type {Object}
     */
    const player = {
        x: null,
        y: null,
        width: 20,
        height: 100,
        /**
         * Update the position depending on pressed keys
         */
        update: function () {
            if (keystate[UP_ARROW]) this.y -= PLAYER_SPEED;
            if (keystate[DOWN_ARROW]) this.y += PLAYER_SPEED;
            // keep the paddle inside of the canvas
            this.y = Math.max(Math.min(this.y, HEIGHT - this.height), 0);
        },
        /**
         * Draw the player paddle to the canvas
         */
        draw: function () {
            ctx.fillRect(this.x, this.y, this.width, this.height);
        }
    };
    /**
     * The ai paddle
     *
     * @type {Object}
     */
    const ai = {
        x: null,
        y: null,
        width: 20,
        height: 100,
        /**
         * Update the position depending on the ball position
         */
        update: function () {
            // calculate ideal position
            const desty = ball.y - (this.height - ball.side) * 0.5;
            //vv CHANGE THE SPEED OF THE AI PADDLE HERE vv
            this.y += (desty - this.y) * AI_SPEED_FACTOR; //somewhere between 0 and 1
            // keep the paddle inside of the canvas
            this.y = Math.max(Math.min(this.y, HEIGHT - this.height), 0);
        },
        /**
         * Draw the ai paddle to the canvas
         */
        draw: function () {
            ctx.fillRect(this.x, this.y, this.width, this.height);
        }
    };
    /**
     * The ball object
     *
     * @type {Object}
     */
    const ball = {
        x: null,
        y: null,
        vel: null,
        side: BALL_SIDE,
        speed: BALL_SPEED,
        /**
         * Serves the ball towards the specified side
         *
         * @param  {number} side 1 right
         *                       -1 left
         */
        serve: function (side) {
            // set the x and y position
            const r = Math.random();
            this.x = side === 1 ? player.x + player.width : ai.x - this.side;
            this.y = (HEIGHT - this.side) * r;
            // calculate out-angle, higher/lower on the y-axis =>
            // steeper angle
            const phi = 0.1 * PI * (1 - 2 * r);
            // set velocity direction and magnitude
            this.vel = {
                x: side * this.speed * Math.cos(phi),
                y: this.speed * Math.sin(phi)
            };
        },
        /**
         * Update the ball position and keep it within the canvas
         */
        update: function () {
            // update position with current velocity
            this.x += this.vel.x;
            this.y += this.vel.y;
            // check if out of the canvas in the y direction
            if (0 > this.y || this.y + this.side > HEIGHT) {
                // calculate and add the right offset, i.e. how far
                // inside of the canvas the ball is
                const offset = this.vel.y < 0 ? 0 - this.y : HEIGHT - (this.y + this.side);
                this.y += 2 * offset;
                // mirror the y velocity
                this.vel.y *= -1;
            }
            // helper function to check intesection between two
            // axis aligned bounding box (AABB)
            const AABBIntersect = (ax, ay, aw, ah, bx, by, bw, bh) => {
                return ax < bx + bw && ay < by + bh && bx < ax + aw && by < ay + ah;
            };
            // check against target paddle to check collision in x direction
            let pdle = this.vel.x < 0 ? player : ai;
            if (AABBIntersect(pdle.x, pdle.y, pdle.width, pdle.height,
                this.x, this.y, this.side, this.side)
            ) {
                // set the x position and calculate reflection angle
                this.x = pdle === player ? player.x + player.width : ai.x - this.side;
                const n = (this.y + this.side - pdle.y) / (pdle.height + this.side);
                const phi = 0.25 * PI * (2 * n - 1); // pi/4 = 45
                // calculate smash value and update velocity
                const smash = Math.abs(phi) > 0.2 * PI ? 1.5 : 1;
                this.vel.x = smash * (pdle === player ? 1 : -1) * this.speed * Math.cos(phi);
                this.vel.y = smash * this.speed * Math.sin(phi);

                beep(); //make a sound!
            }
            // reset the ball when ball outside of the canvas in the
            // x direction
            if (0 > this.x + this.side || this.x > WIDTH) {
                this.serve(pdle === player ? 1 : -1);
                if (pdle === player) {
                    scoreBoard.giveEnemyPoint();
                } else {
                    scoreBoard.givePlayerPoint();
                }
            }
        },
        /**
         * Draw the ball to the canvas
         */
        draw: function () {
            ctx.fillRect(this.x, this.y, this.side, this.side);
        }
    };

    /**
     * Creates a scoreboard that can be updated with each point
     *
     * @type {Object}
     */
    const scoreBoard = {
        playerScore: 0,
        enemyScore: 0,
        givePlayerPoint: function () {
            this.playerScore += 1;
        },
        giveEnemyPoint: function () {
            this.enemyScore += 1;
        },
        draw: function () {
            score.innerText = `Score: ${this.playerScore} | ${this.enemyScore}`;
            canvasDiv.appendChild(canvas);
        }
    };
    /**
     * Starts the game
     */
    const main = () => {
        // create, initiate and append game canvas
        canvasDiv = document.createElement("div");
        canvas = document.createElement("canvas");
        // Also the scoreboard
        scoreDiv = document.createElement("div");
        score = document.createElement("h2");
        // Also the pause and start button
        pauseBtn = document.createElement("button");
        pauseBtn.innerText = "Play / Pause";
        pauseBtn.addEventListener("click", () => {
            isPaused = !isPaused;
        });
        canvas.width = WIDTH;
        canvas.height = HEIGHT;
        ctx = canvas.getContext("2d");
        scoreDiv.appendChild(score);
        document.body.appendChild(pauseBtn);
        document.body.appendChild(scoreDiv);
        document.body.appendChild(canvasDiv);


        keystate = {};
        // keep track of keyboard presses
        document.addEventListener("keydown", (evt) => {
            keystate[evt.keyCode] = true;
        });

        document.addEventListener("keyup", (evt) => {
            delete keystate[evt.keyCode];
        });

        init(); // initiate game objects
        // game loop function
        const loop = () => {
            update();
            draw();
            window.requestAnimationFrame(loop, canvas);
        };
        window.requestAnimationFrame(loop, canvas);
    };
    /**
     * Initiate game objects and set start positions
     */
    const init = () => {
        player.x = player.width;
        player.y = (HEIGHT - player.height) / 2;
        ai.x = WIDTH - (player.width + ai.width);
        ai.y = (HEIGHT - ai.height) / 2;
        ball.serve(1);
    };
    /**
     * Update all game objects
     */
    const update = () => {
        if (!isPaused) {
            ball.update();
            player.update();
            ai.update();
        }
    };
    /**
     * Clear canvas and draw all game objects and net
     */
    const draw = () => {
        ctx.fillRect(0, 0, WIDTH, HEIGHT);
        ctx.save();
        ctx.fillStyle = "#a40acf";
        ball.draw();
        player.draw();
        ai.draw();
        scoreBoard.draw();
        // draw the net
        const w = 4;
        const x = (WIDTH - w) * 0.5;
        let y = 0;
        const step = HEIGHT / 20; // how many net segments
        while (y < HEIGHT) {
            ctx.fillRect(x, y + step * 0.25, w, step * 0.5);
            y += step;
        }
        ctx.restore();
    };

    /**
     * Simple function just to play a beep sound. Using Base64 so that there won't be an
     * external sound file.
     */
    const beep = () => {
        SOUND.play();
    };
    // start and run the game
    main();
</script>
</body>
</html>